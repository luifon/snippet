{
  "Configuração do material module": {
    "scope": "typescript",
    "prefix": "matmodule",
    "body": [
      "import { DragDropModule } from '@angular/cdk/drag-drop';",
      "import { OverlayModule } from '@angular/cdk/overlay';",
      "import { ScrollingModule } from '@angular/cdk/scrolling';",
      "import { NgModule } from '@angular/core';",
      "import { MatAutocompleteModule } from '@angular/material/autocomplete';",
      "import { MatBadgeModule } from '@angular/material/badge';",
      "import { MatButtonModule } from '@angular/material/button';",
      "import { MatCardModule } from '@angular/material/card';",
      "import { MatCheckboxModule } from '@angular/material/checkbox';",
      "import { MatChipsModule } from '@angular/material/chips';",
      "import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';",
      "import { MatDatepickerModule } from '@angular/material/datepicker';",
      "import { MatDialogModule } from '@angular/material/dialog';",
      "import { MatDividerModule } from '@angular/material/divider';",
      "import { MatExpansionModule } from '@angular/material/expansion';",
      "import { MatFormFieldModule } from '@angular/material/form-field';",
      "import { MatGridListModule } from '@angular/material/grid-list';",
      "import { MatIconModule } from '@angular/material/icon';",
      "import { MatInputModule } from '@angular/material/input';",
      "import { MatListModule } from '@angular/material/list';",
      "import { MatMenuModule } from '@angular/material/menu';",
      "import { MatPaginatorModule } from '@angular/material/paginator';",
      "import { MatProgressBarModule } from '@angular/material/progress-bar';",
      "import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';",
      "import { MatRadioModule } from '@angular/material/radio';",
      "import { MatSelectModule } from '@angular/material/select';",
      "import { MatSidenavModule } from '@angular/material/sidenav';",
      "import { MatSlideToggleModule } from '@angular/material/slide-toggle';",
      "import { MatSliderModule } from '@angular/material/slider';",
      "import { MatSnackBarModule } from '@angular/material/snack-bar';",
      "import { MatSortModule } from '@angular/material/sort';",
      "import { MatStepperModule } from '@angular/material/stepper';",
      "import { MatTableModule } from '@angular/material/table';",
      "import { MatTabsModule } from '@angular/material/tabs';",
      "import { MatToolbarModule } from '@angular/material/toolbar';",
      "import { MatTooltipModule } from '@angular/material/tooltip';",
      "import { MatTreeModule } from '@angular/material/tree';",
      "const mat = [",
      " MatToolbarModule,",
      " MatTreeModule,",
      " OverlayModule,",
      " MatSliderModule,",
      " MatButtonModule,",
      " MatSidenavModule,",
      " MatIconModule,",
      " MatListModule,",
      " MatMenuModule,",
      " MatCardModule,",
      " MatDividerModule,",
      " MatSnackBarModule,",
      " MatTableModule,",
      " MatInputModule,",
      " MatNativeDateModule,",
      " MatRippleModule,",
      " MatFormFieldModule,",
      " MatPaginatorModule,",
      " MatDialogModule,",
      " MatSortModule,",
      " MatSelectModule,",
      " MatAutocompleteModule,",
      " MatChipsModule,",
      " MatDatepickerModule,",
      " MatBadgeModule,",
      " MatCheckboxModule,",
      " MatProgressSpinnerModule,",
      " MatStepperModule,",
      " MatTooltipModule,",
      " ScrollingModule,",
      " MatTabsModule,",
      " MatSlideToggleModule,",
      " MatRadioModule,",
      " MatExpansionModule,",
      " MatGridListModule,",
      " DragDropModule,",
      " MatProgressBarModule,",
      "];",
      "@NgModule({",
      "  declarations: [],",
      "  imports: [],",
      "  exports: [...mat],",
      "})",
      "export class MaterialModule {}"
    ]
  }
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
}
